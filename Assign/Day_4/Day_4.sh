# #!/bin/bash

# 1. Create 5 children processes from a common parent and ensure that the parent terminates after cleaning all the terminated children using waitpid(). The waitpid() must be called after all the children are created
# and the parent has completed its work real work,if any. You must interpret the exit code of the cleaned-up processes, using waitpid(), in parent process – you must cover all the possible scenarios !!!

# 2. Create 5 processes but not from the common parent. Meaning, each child creates a new process. clean-up the children using waitpid(). waitpid()
# must be called after all the children are created and the parent has completed its work real work,if any. You must interpret the exit code of the cleaned-up processes, using waitpid(), in the parent process
# – you must cover all the possible scenarios !!!

# 3. Create a 5 child process from a common parent and launch different applications from the children processes - you may launch firefox Gedit, and gcc - parent process must use waitpid() to
# collect the termination status of the child process - waitpid()
# must be called after all the children are created and the parent has completed its work real work,if any. You must interpret the exit code of the cleaned-up processes, using waitpid(), in the parent process
# – you must cover all the possible scenarios -
# meaning, terminate the children processes normally(successful/ unsuccessful) or abnormally !!!

# 4. Create 5 processes from a common parent and ensure that the parent terminates after cleaning all the terminated children using waitpid().
# The waitpid() must be called after all the children are created
# and the parent has completed its work real work,if any; in addition, you must compile 5 different program files to in children processes to generate their respective object files ; the parent process must use waitpid() to collect the termination status of children processes – based on the exit code information generated by children processes, link all the object files to
# generate the final, linked program/application. In addition, the generated binary executable must be loaded in a new process, if the linking is successful
